# remove.py
#
# Given a specified JSON or gzipped JZON test file, this utility will remove
# a specific test specified either by decimal index or hexadecimal hash 
# (test_hash key must have been created by the addhash.py tool or otherwise 
# generated by a test suite)
#
# The new test file will be written to the path specified by the third argument.

import json
import sys
import re
import gzip

def is_test_index(value):
    """Check if the given value is a test index based on its format."""
    return re.match("^\d+$", value)

def remove_test_from_file(file_path, value, output_file_path):
    """Remove a test from the JSON or gzipped JSON file based on the test index or test_hash."""

    data = None
    test_number = 0

    # Check if the file is gzipped and load the content accordingly
    if file_path.endswith('.gz'):
        with gzip.open(file_path, 'rt', encoding='utf-8') as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                print("The provided file is not a valid gzipped JSON.")
    else:
        with open(file_path, 'r') as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                print("The provided file is not a valid JSON.")

    if data and isinstance(data, list):
        if is_test_index(value):  # If the provided value is an index
            idx = int(value)
            if 0 <= idx < len(data):
                test_number = idx
                found_test = True
            else:
                print(f"Test index {idx} is out of range for the provided file.")
        else:  # If the provided value is a test_hash
            for (idx, obj) in enumerate(data):
                if obj.get('test_hash') == value:
                    test_number = idx
                    found_test = True
            print(f"No test found with test_hash: {value} in the provided file.")

    if found_test:
        del data[test_number]

    # Save the modified data back to the output_file
    with open(output_file_path, 'w') as f:
        json.dump(data, f, indent=4)


if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: remove.py <input_file> <test_index_or_hash> <output_file>")
        sys.exit(1)

    input_file = sys.argv[1]
    test_value = sys.argv[2]
    output_file = sys.argv[3]

    # Remove the test based on index or hash
    remove_test_from_file(input_file, test_value, output_file)
    